/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SubtitleFilesConverterView.java
 *
 * Created on 11-mar-2015, 16:52:18
 */
package subtitlefilesconverter;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import subtitles.Subtitle;
import subtitles.SubtitleSet;

/**
 *
 * @author aarguedas
 */
public class SubtitleFilesConverterView extends javax.swing.JFrame {

    /** Creates new form SubtitleFilesConverterView */
    public SubtitleFilesConverterView() {
        initComponents();
        ChooseDialogs.setDirectoryIfExists(".");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldSrcPath = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jRadioButtonFormatSrt = new javax.swing.JRadioButton();
        jRadioButtonFormatStl = new javax.swing.JRadioButton();
        jRadioButtonFormatXml = new javax.swing.JRadioButton();
        jButtonConvert = new javax.swing.JButton();
        jButtonChoosePath = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLogInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Directorio fuente archivos:");

        jLabel2.setText("Formato de salida:");

        buttonGroup1.add(jRadioButtonFormatSrt);
        jRadioButtonFormatSrt.setSelected(true);
        jRadioButtonFormatSrt.setText("SRT");

        buttonGroup1.add(jRadioButtonFormatStl);
        jRadioButtonFormatStl.setText("STL");

        buttonGroup1.add(jRadioButtonFormatXml);
        jRadioButtonFormatXml.setText("XML");

        jButtonConvert.setText("Convertir");
        jButtonConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConvertActionPerformed(evt);
            }
        });

        jButtonChoosePath.setText("...");
        jButtonChoosePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChoosePathActionPerformed(evt);
            }
        });

        jLabel3.setText("Log:");

        jTextAreaLogInfo.setColumns(20);
        jTextAreaLogInfo.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLogInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextFieldSrcPath, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonChoosePath))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jRadioButtonFormatSrt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonFormatStl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonFormatXml)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                        .addComponent(jButtonConvert))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSrcPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonChoosePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonFormatSrt)
                    .addComponent(jRadioButtonFormatStl)
                    .addComponent(jRadioButtonFormatXml)
                    .addComponent(jButtonConvert))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonChoosePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChoosePathActionPerformed

        String path = ChooseDialogs.getDialogFolderOpen();         
        if (path == null)  return;         
         
	this.jTextFieldSrcPath.setText(path);
	
	}//GEN-LAST:event_jButtonChoosePathActionPerformed

    private void jButtonConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConvertActionPerformed

        String path = this.jTextFieldSrcPath.getText();
        if (!path.equals("")) {
            this.convertFilesAsync();
            this.jButtonConvert.setEnabled(false);
            this.jButtonChoosePath.setEnabled(false);
            this.jTextAreaLogInfo.setText("");
	}else{
            JOptionPane.showMessageDialog(null, "No ha introducido un directorio de entrada.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
	}//GEN-LAST:event_jButtonConvertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubtitleFilesConverterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubtitleFilesConverterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubtitleFilesConverterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubtitleFilesConverterView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SubtitleFilesConverterView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonChoosePath;
    private javax.swing.JButton jButtonConvert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRadioButtonFormatSrt;
    private javax.swing.JRadioButton jRadioButtonFormatStl;
    private javax.swing.JRadioButton jRadioButtonFormatXml;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaLogInfo;
    private javax.swing.JTextField jTextFieldSrcPath;
    // End of variables declaration//GEN-END:variables

    private void convertFilesAsync() {
        
        Runnable thr = new Runnable (){
        @Override
        public void run(){
            
            String path = jTextFieldSrcPath.getText();

            File f = new File(path);

            File[] files = f.listFiles();
            Arrays.sort(files);
            ArrayList<File> subtitleFiles= new ArrayList<File>(Arrays.asList(files));

            if (subtitleFiles.size() == 0) {
                JOptionPane.showMessageDialog(null, "No hay archivos en la ruta de entrada seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
                jButtonConvert.setEnabled(true);
                jButtonChoosePath.setEnabled(true);
                return;
            }
            
            for (int i=0; i<subtitleFiles.size(); i++){
                
                String file = subtitleFiles.get(i).getPath();
                SubtitleSet ss;
                try {
                    // cargamos los subtitulos a convertir
                    ss = new SubtitleSet(file);
                } catch (Exception ex) {
                    String text = jTextAreaLogInfo.getText();
                    text += "Error al leer el archivo: " +  file + "\n";
                    jTextAreaLogInfo.setText(text);
                    continue;
                }
                
                // guardamos los subtitulos en el formato seleccionado
                String fileOut;
                if (jRadioButtonFormatSrt.isSelected()){
                    fileOut = file.substring(0,file.length()-4) + ".srt";
                }else if (jRadioButtonFormatStl.isSelected()){
                    fileOut = file.substring(0,file.length()-4) + ".stl";
                    
                    //-- convertimos los subtitulos al formato stl
                    ArrayList<Subtitle> vsubtitles = ss.getVsubtitles();
                    ArrayList <Subtitle> vsubOut = new ArrayList();
                    for(int j=0; j<vsubtitles.size(); j++){
                        Subtitle sub = vsubtitles.get(j);
                        sub.toSTLFormat(j, 17, 25);
                        vsubOut.add(sub);        
                    }
                    ss = new SubtitleSet(vsubOut);
                    
                }else{
                    fileOut = file.substring(0,file.length()-4) + ".xml";
                }
                
                try {
                    ss.write(fileOut, false);
                } catch (Exception ex) {
                    String text = jTextAreaLogInfo.getText();
                    text += "Error al escribir el archivo: " +  fileOut + "\n";
                    jTextAreaLogInfo.setText(text);
                }
                
                String text = jTextAreaLogInfo.getText();
                text += "Archivo generado: " +  fileOut + "\n";
                jTextAreaLogInfo.setText(text);
            }
            
            JOptionPane.showMessageDialog(null, "Conversión de archivos finalizada.", "Aviso", JOptionPane.WARNING_MESSAGE);
            jButtonConvert.setEnabled(true);
            jButtonChoosePath.setEnabled(true);
 
        }};    
        new Thread(thr).start();
    }
}
